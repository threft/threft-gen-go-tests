package structure

// This complete file is to be generated by the thrift4go generator.
// The currently generated struct is contains metadata for pseudo-dynamic serialization in the protocol.
// 		
// The goal of this sub-project (struct-tryout) is to provide an example generated-code and use-cases for a new aproach to thrift structs.
// 		this is not implemented yet, and just in designing phase.
// This file only contains code for the struct `Building` as defined in the thrift file struct.thrift
// The filename for this code is the combination of the word "struct" and the go typename of the generated struct, capitalized.
// For example: `struct Building` becomes `structBuilding.go`
// This code is heavily based on the existing TList code in /thriftgo/lib/go/src/thrift/tlist.go

import ()

// This struct type is to-be-generated by the thrift go generator for input file struct.thrift
// Note that all fields are capitalized so they are "exported" in Go.
type Building struct {
	Name         string
	Height       int32
	DoorOpen     bool
	FrontWindow  *Window // fields with a type that is an other struct or enum are always pointers to that type.
	BackDoorOpen *bool   // this field is has a pointer type as it is optional. nil means that the field is not present.
	BackWindow   *Window // this field is optional, but is a pointer anyway. It does not have to be set upon writing and is not instantiated by NewBuilding()
}

func NewBuilding() *Building {
	return &Building{
		FrontWindow: NewWindow(),
	}
}

// Read code much like it is now.. I (GeertJohan) am still thinking about an other approach to protocol integration
func (p *Building) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ read code that /knows/ the struct's metadata
	// calls readField_Name, readField_Height, readField_DoorOpen, optionally: readField_BackDoorOpen, optionally: readField_BackWindow
}

func (p *Building) readField_Name(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ read code that /knows/ the field's metadata
}

func (p *Building) readField_Height(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ read code that /knows/ the field's metadata
}

func (p *Building) readField_DoorOpen(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ read code that /knows/ the field's metadata
}

func (p *Building) readField_FrontWindow(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	// struct read dispatch
	p.FrontWindow.Read(iprot)
}

func (p *Building) readField_BackDoorOpen(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ read code that /knows/ the field's metadata
}

func (p *Building) readField_BackWindow(iprot thrift.TProtofol) (err thrift.TProtocolException) {
	p.BackWindow = NewWindow() // create new Window as it is an optional field
	p.BackWindow.Read(iprot)
}

// Write code much like it is now.. I (GeertJohan) am still thinking about an other approach to protocol integration
func (p *Building) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ write code that /knows/ the struct's metadata
	// calls writeField_Name, writeField_Height, writeField_DoorOpen, optionally: writeField_BackDoorOpen, optionally: writeField_BackWindow
}

func (p *Building) writeField_Name(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ write code that /knows/ the field's metadata
}

func (p *Building) writeField_Height(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ write code that /knows/ the field's metadata
}

func (p *Building) writeField_DoorOpen(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ write code that /knows/ the field's metadata
}

func (p *Building) writeField_FrontWindow(oprot thrift.TProtofol) (err thrift.TProtocolException) {
	// struct write dispatch
	p.FrontWindow.Write(oprot)
}

func (p *Building) writeField_BackDoorOpen(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	//++ write code that /knows/ the field's metadata
	// calls writeField_Name, writeField_Height, writeField_DoorOpen, writeField_BackDoorOpen, 
}

func (p *Building) writeField_BackWindow(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	// struct write dispatch
	p.BackWindow.Write(oprot)
}
